CREATE SCHEMA ProfessorSupportSystem;
SET SEARCH_PATH TO ProfessorSupportSystem;

CREATE TABLE PROJECT_TEAMS(
TeamNo VARCHAR(7),
LeaderID DECIMAL(9,0),
PRIMARY KEY (TeamNo)
);

CREATE TABLE TEAM_MEMBERS(
TeamNo VARCHAR(7),
StudentID DECIMAL(9,0),
PRIMARY KEY (TeamNo, StudentID),
FOREIGN KEY (TeamNo) REFERENCES PROJECT_TEAMS (TeamNo)
ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE PROJECT_PERFORMANCE(
TeamNo VARCHAR(7),
Topic VARCHAR(99),
OnTimeSub SMALLINT,
Marks DECIMAL(4,1),
PRIMARY KEY (TeamNo),
FOREIGN KEY (TeamNo) REFERENCES PROJECT_TEAMS (TeamNo)
ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE BATCH_DETAILS(
Batch NUMERIC(4,0),
Course VARCHAR(20),
PRIMARY KEY (Batch)
);


CREATE TABLE TIME_SCHEDULE(
Batch NUMERIC(4,0),
Day VARCHAR(9),
Time TIME,
PRIMARY KEY(Batch, Day),
FOREIGN KEY (Batch) REFERENCES BATCH_DETAILS (Batch)
ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE STUDENT(
StudentID DECIMAL(9,0),
Name VARCHAR(25),
TeamNo VARCHAR(7) ,
CPI DECIMAL(4,2),
Batch NUMERIC(4,0),
PRIMARY KEY (StudentID),
FOREIGN KEY (TeamNo) REFERENCES PROJECT_TEAMS (TeamNo)
ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (Batch) REFERENCES BATCH_DETAILS (Batch)
ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE LAB_PERFORMANCE(
StudentID DECIMAL(9,0),
Lab SMALLINT,
LabAttendance BOOLEAN,
Submission DECIMAL(4,1),
Viva DECIMAL(4,1),
PRIMARY KEY (StudentID, Lab),
FOREIGN KEY (StudentID) REFERENCES STUDENT (StudentID)
ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE CLASS_PERFORMANCE(
StudentID DECIMAL(9,0),
Quizes DECIMAL(4,1),
InSem1 DECIMAL(4,1),
InSem2 DECIMAL(4,1),
EndSem DECIMAL(4,1),
PRIMARY KEY (StudentID),
FOREIGN KEY (StudentID) REFERENCES STUDENT (StudentID)
ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE CLASS_ATTENDANCE(
StudentID DECIMAL(9,0),
WeekID SMALLINT,
Presents SMALLINT,
PRIMARY KEY (StudentID, WeekID ),
FOREIGN KEY (StudentID) REFERENCES STUDENT (StudentID)
ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE WEEK_INFO(
WeekID SMALLINT ,
Batch NUMERIC(4,0) ,
Classes SMALLINT,
SlideLink VARCHAR(150),
PRIMARY KEY (WeekID, Batch),
FOREIGN KEY (Batch) REFERENCES BATCH_DETAILS (Batch)
ON DELETE CASCADE ON UPDATE CASCADE
);

ALTER TABLE ONLY LAB_PERFORMANCE ALTER COLUMN LabAttendance SET DEFAULT 'false';

ALTER TABLE ONLY LAB_PERFORMANCE ALTER COLUMN Submission SET DEFAULT 0;

ALTER TABLE ONLY LAB_PERFORMANCE ALTER COLUMN Viva SET DEFAULT 0;

ALTER TABLE ONLY PROJECT_PERFORMANCE ALTER COLUMN OnTimeSub SET DEFAULT 0;

ALTER TABLE ONLY PROJECT_PERFORMANCE ALTER COLUMN Marks SET DEFAULT 0;

ALTER TABLE ONLY CLASS_PERFORMANCE ALTER COLUMN Quizes SET DEFAULT 0;

ALTER TABLE ONLY CLASS_PERFORMANCE ALTER COLUMN InSem1 SET DEFAULT 0;

ALTER TABLE ONLY CLASS_PERFORMANCE ALTER COLUMN InSem2 SET DEFAULT 0;

ALTER TABLE ONLY CLASS_PERFORMANCE ALTER COLUMN EndSem SET DEFAULT 0;

ALTER TABLE ONLY CLASS_ATTENDANCE ALTER COLUMN Presents SET DEFAULT 0;


CREATE OR REPLACE VIEW TC AS SELECT Batch, SUM(Classes) AS TotalClasses FROM WEEK_INFO GROUP BY BATCH;

CREATE OR REPLACE VIEW Theory_Marks AS SELECT StudentId, (Quizes + InSem1 + InSem2 + EndSem) AS TheoryMarks FROM STUDENT NATURAL JOIN CLASS_PERFORMANCE WHERE Batch = 2016;

CREATE OR REPLACE VIEW Project_Marks AS SELECT StudentId, Marks AS ProjectMarks FROM TEAM_MEMBERS AS t NATURAL JOIN PROJECT_PERFORMANCE AS p WHERE t.TeamNo = p.TeamNo;

CREATE OR REPLACE VIEW Lab_Marks AS SELECT l.StudentId,(SUM(Submission) + SUM(Viva)) AS LabMarks FROM STUDENT NATURAL JOIN LAB_PERFORMANCE AS l WHERE Batch = 2016 GROUP BY l.StudentId;

CREATE OR REPLACE VIEW Practical_Marks AS SELECT l.StudentId, (LabMarks + ProjectMarks) AS PracticalMarks FROM Project_Marks NATURAL JOIN Lab_Marks AS l;

CREATE OR REPLACE VIEW Marks_Details AS SELECT t.StudentId, TheoryMarks, PracticalMarks FROM Theory_Marks AS t NATURAL JOIN Practical_Marks;

CREATE OR REPLACE VIEW PER_Marks_Details AS SELECT StudentID, (TheoryMarks/(SELECT MAX(TheoryMarks) FROM Marks_Details)) AS PerTheory, (PracticalMarks/(SELECT MAX(PracticalMarks) FROM Marks_Details)) AS PerPracticals FROM Marks_Details;

CREATE OR REPLACE VIEW Per_Class_Att AS SELECT c.StudentId, ((SUM(Presents)*1.0/(SELECT TotalClasses FROM TC WHERE Batch = 2018))*100) AS PerClassAttendance FROM CLASS_ATTENDANCE AS c NATURAL JOIN STUDENT WHERE Batch = 2016 GROUP BY c.StudentID;

CREATE OR REPLACE VIEW Per_Lab_Att AS SELECT StudentID, ((COUNT(CASE WHEN LabAttendance THEN 1 END)*1.0/COUNT(DISTINCT Lab))*100) AS PerLabAttendance FROM LAB_PERFORMANCE NATURAL JOIN STUDENT WHERE Batch = 2016 GROUP BY StudentID;
